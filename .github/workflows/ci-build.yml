name: Build and Deploy Image Container

on:
  push:
    branches: [ 'main' ]
    paths-ignore:
      - '**/README.md'
  workflow_dispatch: # Enable manual triggering of the workflow

env:
  DOTNET_VERSION: '8.0.x' 
  BUILD_CONFIGURATION: 'Release'    
  PUBLISH_PROJECT: 'ApiDemo.Api/ApiDemo.Api.csproj'
  DOCKER_HUB_REPOSITORY: 'api-demo-event'

defaults:
  run:
    working-directory: ./src

# Ensures only one execution per branch will run at a time.
concurrency:
  group: ${{ github.ref }}
  
jobs:
  ci-build:

    runs-on: ubuntu-latest
    outputs:
      nuget_version: ${{ steps.gitversion.outputs.nuGetVersionV2 }} 

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17' # Set up Java 17, because SonarCloud requires it
        distribution: 'adopt' 

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Setup GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.7
      id: gitversion

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        source-url: ${{ secrets.PACKAGES_FEED_URL }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}

    - name: Cache .NET Core packages
      uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-

    - name: Restore dependencies
      run: dotnet restore

    - name: Install SonarCloud
      run: dotnet tool install --global dotnet-sonarscanner
   
    - name: Build
      run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} -p:GeneratePackageOnBuild=false

    - name: Test
      run: |
            dotnet test --no-restore --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} \
                    /p:CollectCoverage=true \
                    /p:CoverletOutput=../CoverageResults/ \
                    /p:MergeWith="../CoverageResults/coverage.json" \
                    /p:CoverletOutputFormat=\"opencover,json\" \
                    -m:1
      
    - name: Publish API
      run: dotnet publish ${{ env.PUBLISH_PROJECT }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --output './../publish'
   
    - name: Login to Docker Hub Registry
      uses: docker/login-action@v3
      with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}      

    - name: Build and Push Image to Docker Hub Registry
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.Api
        push: true
        tags: ${{secrets.DOCKERHUB_USERNAME}}/${{env.DOCKER_HUB_REPOSITORY}}:${{ steps.gitversion.outputs.nuGetVersionV2 }}
        labels: |
            org.opencontainers.image.title=ApiDemo.Api
            org.opencontainers.image.description=ApiDemo.Api
            org.opencontainers.image.version=${{ steps.gitversion.outputs.nuGetVersionV2 }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.gitversion.outputs.nuGetVersionV2}}
        release_name: Release ${{ steps.gitversion.outputs.nuGetVersionV2}}

  deploy-to-qa:
    needs: ci-build
    runs-on: ubuntu-latest
    environment: QA
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to QA Azure Container App
        run: |
          echo Deploying version ${{ needs.build.outputs.nuget_version }}
          az containerapp update --name ${{ secrets.AZURE_CONTAINERAPP_NAME_QA }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_QA }} --image ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_HUB_REPOSITORY }}:${{ needs.ci-build.outputs.nuget_version }}

  deploy-to-prod:
    needs: deploy-to-qa
    runs-on: ubuntu-latest
    environment: PROD
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Wait for deployment approval
        run: echo Waiting for approval to deploy to PROD
        env:
          DEPLOYMENT_APPROVAL_REQUIRED: true

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to Production Azure Container App
        run: |
          az containerapp update --name ${{ secrets.AZURE_CONTAINERAPP_NAME_PROD }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} --image ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_HUB_REPOSITORY }}:${{ needs.ci-build.outputs.nuget_version }}
